# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  projects: ProjectManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ProjectManyRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  projects: ProjectRelateToManyForUpdateInput
}

input ProjectRelateToManyForUpdateInput {
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  projects: ProjectRelateToManyForCreateInput
}

input ProjectRelateToManyForCreateInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

type SocialMediaConfig {
  id: ID!
  instagram: String
  facebook: String
  linkedin: String
  twitter: String
}

input SocialMediaConfigWhereUniqueInput {
  id: ID
}

input SocialMediaConfigWhereInput {
  AND: [SocialMediaConfigWhereInput!]
  OR: [SocialMediaConfigWhereInput!]
  NOT: [SocialMediaConfigWhereInput!]
  id: IDFilter
  instagram: StringFilter
  facebook: StringFilter
  linkedin: StringFilter
  twitter: StringFilter
}

input SocialMediaConfigOrderByInput {
  id: OrderDirection
  instagram: OrderDirection
  facebook: OrderDirection
  linkedin: OrderDirection
  twitter: OrderDirection
}

input SocialMediaConfigUpdateInput {
  instagram: String
  facebook: String
  linkedin: String
  twitter: String
}

input SocialMediaConfigUpdateArgs {
  where: SocialMediaConfigWhereUniqueInput!
  data: SocialMediaConfigUpdateInput!
}

input SocialMediaConfigCreateInput {
  instagram: String
  facebook: String
  linkedin: String
  twitter: String
}

type WebsiteConfig {
  id: ID!
  url: String
  title: String
  keywords: String
  description: String
  theme: String
  footer_text: String
  sidebarLogo: CloudinaryImage_File
  image: CloudinaryImage_File
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input WebsiteConfigWhereUniqueInput {
  id: ID
}

input WebsiteConfigWhereInput {
  AND: [WebsiteConfigWhereInput!]
  OR: [WebsiteConfigWhereInput!]
  NOT: [WebsiteConfigWhereInput!]
  id: IDFilter
  url: StringFilter
  title: StringFilter
  keywords: StringFilter
  description: StringFilter
  theme: StringFilter
  footer_text: StringFilter
}

input WebsiteConfigOrderByInput {
  id: OrderDirection
  url: OrderDirection
  title: OrderDirection
  keywords: OrderDirection
  description: OrderDirection
  theme: OrderDirection
  footer_text: OrderDirection
}

input WebsiteConfigUpdateInput {
  url: String
  title: String
  keywords: String
  description: String
  theme: String
  footer_text: String
  sidebarLogo: Upload
  image: Upload
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input WebsiteConfigUpdateArgs {
  where: WebsiteConfigWhereUniqueInput!
  data: WebsiteConfigUpdateInput!
}

input WebsiteConfigCreateInput {
  url: String
  title: String
  keywords: String
  description: String
  theme: String
  footer_text: String
  sidebarLogo: Upload
  image: Upload
}

type Project {
  id: ID!
  thumbnail: CloudinaryImage_File
  title: String
  permalink: String
  keywords: String
  description: String
  publishDate: DateTime
  author: User
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  panoramas(
    where: PanoramaWhereInput! = {}
    orderBy: [PanoramaOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Panorama!]
  panoramasCount(where: PanoramaWhereInput! = {}): Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  title: StringFilter
  permalink: StringFilter
  keywords: StringFilter
  description: StringFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  categories: CategoryManyRelationFilter
  images: ImageManyRelationFilter
  panoramas: PanoramaManyRelationFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input PanoramaManyRelationFilter {
  every: PanoramaWhereInput
  some: PanoramaWhereInput
  none: PanoramaWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  title: OrderDirection
  permalink: OrderDirection
  keywords: OrderDirection
  description: OrderDirection
  publishDate: OrderDirection
}

input ProjectUpdateInput {
  thumbnail: Upload
  title: String
  permalink: String
  keywords: String
  description: String
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  images: ImageRelateToManyForUpdateInput
  panoramas: PanoramaRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input PanoramaRelateToManyForUpdateInput {
  disconnect: [PanoramaWhereUniqueInput!]
  set: [PanoramaWhereUniqueInput!]
  create: [PanoramaCreateInput!]
  connect: [PanoramaWhereUniqueInput!]
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  thumbnail: Upload
  title: String
  permalink: String
  keywords: String
  description: String
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  categories: CategoryRelateToManyForCreateInput
  images: ImageRelateToManyForCreateInput
  panoramas: PanoramaRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input PanoramaRelateToManyForCreateInput {
  create: [PanoramaCreateInput!]
  connect: [PanoramaWhereUniqueInput!]
}

type Image {
  id: ID!
  image: CloudinaryImage_File
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  projects: ProjectManyRelationFilter
}

input ImageOrderByInput {
  id: OrderDirection
}

input ImageUpdateInput {
  image: Upload
  projects: ProjectRelateToManyForUpdateInput
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  image: Upload
  projects: ProjectRelateToManyForCreateInput
}

type Panorama {
  id: ID!
  image: CloudinaryImage_File
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
}

input PanoramaWhereUniqueInput {
  id: ID
}

input PanoramaWhereInput {
  AND: [PanoramaWhereInput!]
  OR: [PanoramaWhereInput!]
  NOT: [PanoramaWhereInput!]
  id: IDFilter
  projects: ProjectManyRelationFilter
}

input PanoramaOrderByInput {
  id: OrderDirection
}

input PanoramaUpdateInput {
  image: Upload
  projects: ProjectRelateToManyForUpdateInput
}

input PanoramaUpdateArgs {
  where: PanoramaWhereUniqueInput!
  data: PanoramaUpdateInput!
}

input PanoramaCreateInput {
  image: Upload
  projects: ProjectRelateToManyForCreateInput
}

type Category {
  id: ID!
  name: String
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  projects: ProjectManyRelationFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoryUpdateInput {
  name: String
  projects: ProjectRelateToManyForUpdateInput
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  projects: ProjectRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createSocialMediaConfig(
    data: SocialMediaConfigCreateInput!
  ): SocialMediaConfig
  createSocialMediaConfigs(
    data: [SocialMediaConfigCreateInput!]!
  ): [SocialMediaConfig]
  updateSocialMediaConfig(
    where: SocialMediaConfigWhereUniqueInput!
    data: SocialMediaConfigUpdateInput!
  ): SocialMediaConfig
  updateSocialMediaConfigs(
    data: [SocialMediaConfigUpdateArgs!]!
  ): [SocialMediaConfig]
  deleteSocialMediaConfig(
    where: SocialMediaConfigWhereUniqueInput!
  ): SocialMediaConfig
  deleteSocialMediaConfigs(
    where: [SocialMediaConfigWhereUniqueInput!]!
  ): [SocialMediaConfig]
  createWebsiteConfig(data: WebsiteConfigCreateInput!): WebsiteConfig
  createWebsiteConfigs(data: [WebsiteConfigCreateInput!]!): [WebsiteConfig]
  updateWebsiteConfig(
    where: WebsiteConfigWhereUniqueInput!
    data: WebsiteConfigUpdateInput!
  ): WebsiteConfig
  updateWebsiteConfigs(data: [WebsiteConfigUpdateArgs!]!): [WebsiteConfig]
  deleteWebsiteConfig(where: WebsiteConfigWhereUniqueInput!): WebsiteConfig
  deleteWebsiteConfigs(
    where: [WebsiteConfigWhereUniqueInput!]!
  ): [WebsiteConfig]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(
    where: ProjectWhereUniqueInput!
    data: ProjectUpdateInput!
  ): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createPanorama(data: PanoramaCreateInput!): Panorama
  createPanoramas(data: [PanoramaCreateInput!]!): [Panorama]
  updatePanorama(
    where: PanoramaWhereUniqueInput!
    data: PanoramaUpdateInput!
  ): Panorama
  updatePanoramas(data: [PanoramaUpdateArgs!]!): [Panorama]
  deletePanorama(where: PanoramaWhereUniqueInput!): Panorama
  deletePanoramas(where: [PanoramaWhereUniqueInput!]!): [Panorama]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  socialMediaConfigs(
    where: SocialMediaConfigWhereInput! = {}
    orderBy: [SocialMediaConfigOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SocialMediaConfig!]
  socialMediaConfig(
    where: SocialMediaConfigWhereUniqueInput!
  ): SocialMediaConfig
  socialMediaConfigsCount(where: SocialMediaConfigWhereInput! = {}): Int
  websiteConfigs(
    where: WebsiteConfigWhereInput! = {}
    orderBy: [WebsiteConfigOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [WebsiteConfig!]
  websiteConfig(where: WebsiteConfigWhereUniqueInput!): WebsiteConfig
  websiteConfigsCount(where: WebsiteConfigWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  panoramas(
    where: PanoramaWhereInput! = {}
    orderBy: [PanoramaOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Panorama!]
  panorama(where: PanoramaWhereUniqueInput!): Panorama
  panoramasCount(where: PanoramaWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
